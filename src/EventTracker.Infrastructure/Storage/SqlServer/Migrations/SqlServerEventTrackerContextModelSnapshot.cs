// <auto-generated />
using System;
using EventTracker.Infrastructure.Storage.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventTracker.Infrastructure.Storage.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerEventTrackerContext))]
    partial class SqlServerEventTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventTracker.Domain.Model.Parcel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeliveryDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PickupDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Parcels", (string)null);
                });

            modelBuilder.Entity("EventTracker.Domain.Model.WorkerState", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("LastProcessedEventId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("WorkerStates", (string)null);
                });

            modelBuilder.Entity("EventTracker.Domain.Model.Parcel", b =>
                {
                    b.OwnsOne("EventTracker.Domain.Model.ScanEvent", "LastEvent", b1 =>
                        {
                            b1.Property<long>("ParcelId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreatedDateTimeUtc")
                                .HasColumnType("datetime2");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint");

                            b1.Property<string>("RunId")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("StatusCode")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("ParcelId");

                            b1.ToTable("Parcels", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ParcelId");
                        });

                    b.Navigation("LastEvent");
                });
#pragma warning restore 612, 618
        }
    }
}
